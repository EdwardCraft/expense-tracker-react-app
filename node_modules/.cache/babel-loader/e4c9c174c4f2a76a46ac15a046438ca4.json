{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\admin\\\\Documents\\\\Proyects\\\\expense-tracker-react-app\\\\src\\\\components\\\\NewExpense\\\\ExpenseForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport \"./ExpenseForm.css\"; //when ever you update\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ExpenseForm = () => {\n  _s();\n\n  const [userIput, setUserIput] = useState({\n    enterTitle: \"\",\n    enterAmount: \"\",\n    enterDate: \"\"\n  });\n\n  const titleChangeHandler = event => {\n    // If your state updates depends on the previws update\n    // this functios form es recomended.\n    setUserIput(prevState => {\n      return { ...userIput,\n        enterTitle: event.target.value\n      };\n    });\n  };\n\n  const amountChangeHandler = event => {\n    /*setUserIput({\r\n      ...userIput,\r\n      enterAmount: event.target.value,\r\n    });*/\n    setUserIput(prevState => {\n      return { ...userIput,\n        enterAmount: event.target.value\n      };\n    });\n  };\n\n  const dateChangeHandler = event => {\n    /*setUserIput({\r\n      ...userIput,\r\n      enterDate: event.target.value,\r\n    });*/\n    setUserIput(prevState => {\n      return { ...userIput,\n        enterDate: event.target.value\n      };\n    });\n  };\n\n  const submitHandler = event => {\n    event.preventDefault();\n    const expenseData = {\n      title: userIput.enterTitle,\n      amount: userIput.enterAmount,\n      date: new Date(userIput.enterDate)\n    };\n    console.log(expenseData);\n  };\n\n  const clearUserInput = () => {\n    setUserIput(prevState => {\n      return {\n        enterTitle: \"\",\n        enterAmount: \"\",\n        enterDate: \"\"\n      };\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: submitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: userIput.enterTitle,\n          onChange: titleChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Ammount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"0.01\",\n          step: \"0.01\",\n          onChange: amountChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          min: \"2019-01-01\",\n          max: \"2022-12-31\",\n          onChange: dateChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add Expense\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ExpenseForm, \"sEPvynHequQchjHlF5LZj6vb3Gk=\");\n\n_c = ExpenseForm;\nexport default ExpenseForm;\n/**\r\n *  Two Way bindings: means that not only litsen  to changes\r\n *  but also pass new value.\r\n *\r\n */\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"sources":["C:/Users/admin/Documents/Proyects/expense-tracker-react-app/src/components/NewExpense/ExpenseForm.js"],"names":["React","useState","ExpenseForm","userIput","setUserIput","enterTitle","enterAmount","enterDate","titleChangeHandler","event","prevState","target","value","amountChangeHandler","dateChangeHandler","submitHandler","preventDefault","expenseData","title","amount","date","Date","console","log","clearUserInput"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./ExpenseForm.css\";\r\n\r\n//when ever you update\r\nconst ExpenseForm = () => {\r\n  const [userIput, setUserIput] = useState({\r\n    enterTitle: \"\",\r\n    enterAmount: \"\",\r\n    enterDate: \"\",\r\n  });\r\n\r\n  const titleChangeHandler = (event) => {\r\n    // If your state updates depends on the previws update\r\n    // this functios form es recomended.\r\n    setUserIput((prevState) => {\r\n      return { ...userIput, enterTitle: event.target.value };\r\n    });\r\n  };\r\n\r\n  const amountChangeHandler = (event) => {\r\n    /*setUserIput({\r\n      ...userIput,\r\n      enterAmount: event.target.value,\r\n    });*/\r\n    setUserIput((prevState) => {\r\n      return { ...userIput, enterAmount: event.target.value };\r\n    });\r\n  };\r\n\r\n  const dateChangeHandler = (event) => {\r\n    /*setUserIput({\r\n      ...userIput,\r\n      enterDate: event.target.value,\r\n    });*/\r\n    setUserIput((prevState) => {\r\n      return { ...userIput, enterDate: event.target.value };\r\n    });\r\n  };\r\n\r\n  const submitHandler = (event) => {\r\n    event.preventDefault();\r\n    const expenseData = {\r\n      title: userIput.enterTitle,\r\n      amount: userIput.enterAmount,\r\n      date: new Date(userIput.enterDate),\r\n    };\r\n    console.log(expenseData);\r\n  };\r\n\r\n  const clearUserInput = () => {\r\n    setUserIput((prevState) => {\r\n      return {\r\n        enterTitle: \"\",\r\n        enterAmount: \"\",\r\n        enterDate: \"\",\r\n      };\r\n    });\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={submitHandler}>\r\n      <div className=\"new-expense__controls\">\r\n        <div className=\"new-expense__control\">\r\n          <label>Title</label>\r\n          <input type=\"text\" value={userIput.enterTitle} onChange={titleChangeHandler} />\r\n        </div>\r\n        <div className=\"new-expense__control\">\r\n          <label>Ammount</label>\r\n          <input\r\n            type=\"number\"\r\n            min=\"0.01\"\r\n            step=\"0.01\"\r\n            onChange={amountChangeHandler}\r\n          />\r\n        </div>\r\n        <div className=\"new-expense__control\">\r\n          <label>Date</label>\r\n          <input\r\n            type=\"date\"\r\n            min=\"2019-01-01\"\r\n            max=\"2022-12-31\"\r\n            onChange={dateChangeHandler}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"new-expense__actions\">\r\n        <button type=\"submit\">Add Expense</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ExpenseForm;\r\n\r\n/**\r\n *  Two Way bindings: means that not only litsen  to changes\r\n *  but also pass new value.\r\n *\r\n */\r\n"]},"metadata":{},"sourceType":"module"}